{"version":3,"sources":["NationalInsurance/Tresholds.js","util.js","NationalInsurance/Grid.js","NationalInsurance/index.js","IncomeTax/Tresholds.js","IncomeTax/Grid.js","IncomeTax/index.js","ContractDetails/index.js","NetPay/index.js","App.js","serviceWorker.js","index.js"],"names":["TresholdsOrder","Tresholds","LEL","name","value","description","employee","employer","PT","UEL","financial","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","format","Math","floor","percentOf","isPercent","of","NationalInsuranceTresholds","_ref2","weeklyRate","niAmmounts","summedTresholds","type","react_default","a","createElement","Segment","Header","as","util","Progress","percent","color","progress","active","Fragment","NationalInsuranceGrid","_ref","props","Object","esm_extends","Grid","divided","columns","Column","Grid_NationalInsuranceTresholds","assign","NationalInsurance","this","calculateNI","onChange","_sumBy","prevProps","tresholdAmmounts","_map","code","index","nextIndex","length","ammount","console","log","treshold","NationalInsurance_Grid","Component","PA","rate","exception","BR","HR","AR","IncomeTaxGrid","yearlyRate","ammounts","_findIndex","tax","Message","size","IncomeTax","calculateIncomeTax","checkPersonalAllowance","push","objectSpread","IncomeTax_Grid","ContractDetails","handleChangeWeeks","e","_this","onChangeWeeks","target","handleChangeDayRate","onChangeRate","className","Input","pattern","min","noWeeks","label","content","labelPosition","placeholder","step","dayRate","NetPay","nationalInsurance","incomeTax","gross","net","Statistic","Value","Label","App","state","updateDayRate","setState","updateNumberOfWeeks","handleNationalInsuranceChange","handleIncomeTaxChange","src_ContractDetails","src_IncomeTax","src_NationalInsurance","src_NetPay","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e016cdb8.chunk.js","sourcesContent":["/*\n  Class 1 National Insurance thresholds 2018 to 2019\n*/\n\nconst Tresholds = {\n  LEL: {\n    name:  'Lower Earnings Limit',\n    value: 116,\n    description: 'Earnings at or above LEL up to and including PT',\n    employee: 0,\n    employer: 0,\n  },\n  PT: {\n    name:  'Primary Threshold',\n    description: 'Earnings above the PT up to and including UEL',\n    value: 162,\n    employee: 12,\n    employer: 13.8,\n  },\n  UEL: {\n    name: 'Upper Earnings Limit',\n    description: 'Balance of earnings above UEL',\n    value: 892,\n    employee: 2,\n    employer: 13.8,\n  },\n};\n\nexport const TresholdsOrder = ['LEL', 'PT', 'UEL'];\n\nexport default Tresholds;\n","\nexport function financial(amount) {\n  return new Intl.NumberFormat('en-UK', {\n    style: 'currency',\n    currency: 'GBP',\n    minimumFractionDigits: 0,\n  }).format(Math.floor(amount));\n}\n\nexport function position(value) {\n    return {\n      left: percentOf(window.innerWidth, percentOfWeeklyRate(value)),\n    };\n  }\n\n  export function widthValueToPx(value) {\n      return {\n        width: percentOf(window.innerWidth, percentOfWeeklyRate(value)),\n      };\n    }\n\n  export function percentOfWeeklyRate(value) {\n    return percent(value, 350 * 5);\n  };\n\n  export function percentOf(isPercent, of) {\n    return Math.floor(isPercent * (of / 100));\n  }\n\n  export function percent(x, y) {\n    const z = Math.floor((x / y) * 100);\n    return z;\n  }\n","import React from 'react';\nimport { Grid, Progress, Header, Segment } from 'semantic-ui-react'\nimport * as util from '../util.js';\nimport Tresholds from './Tresholds';\n\nconst NationalInsuranceGrid = ( { ...props }) =>\n<>\n  <Grid divided columns={2}>\n   <Grid.Column>\n      <NationalInsuranceTresholds type=\"employee\" {...props} />\n    </Grid.Column>\n    <Grid.Column>\n      <NationalInsuranceTresholds type=\"employer\" {...props} />\n   </Grid.Column>\n </Grid>\n</>\n\n\nconst NationalInsuranceTresholds = ( { weeklyRate, niAmmounts, summedTresholds, type }) =>\n<Segment>\n  <Header as='h3'>NI {type}: {util.financial(summedTresholds[type])}/week</Header>\n\n  {weeklyRate > Tresholds.PT.value && weeklyRate < Tresholds.UEL.value && (\n    <Progress percent={Tresholds.PT[type]} color='orange' progress active>\n      {util.financial(niAmmounts[0][type])} {Tresholds.PT.name} from £{Tresholds.PT.value} to £{weeklyRate}\n    </Progress>\n  )}\n\n  {weeklyRate > Tresholds.UEL.value && (\n    <>\n    <Progress percent={Tresholds.PT[type]} color='orange' progress active>\n      {util.financial(niAmmounts[1][type])} {Tresholds.PT.name} from £{Tresholds.PT.value} to £{Tresholds.UEL.value}\n    </Progress>\n    <Progress percent={Tresholds.UEL[type]} color='yellow' progress active>\n      {util.financial(niAmmounts[0][type])} {Tresholds.UEL.name} from £{Tresholds.UEL.value} to {util.financial(weeklyRate)}\n    </Progress>\n    </>\n  )}\n</Segment>\n\nexport default NationalInsuranceGrid;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport _map from 'lodash/map';\nimport _sumBy from 'lodash/sumBy';\n\nimport Tresholds, { TresholdsOrder } from './Tresholds';\nimport NationalInsuranceGrid from './Grid';\n\nimport * as util from '../util.js';\nimport '../index.css';\n\nimport { Header } from 'semantic-ui-react'\n\nclass NationalInsurance extends Component {\n  static propTypes = {\n    weeklyRate: PropTypes.number.isRequired,\n    onChange: PropTypes.func.isRequired,\n  };\n\n  componentDidMount() {\n    const niAmmounts = this.calculateNI();\n    this.props.onChange(_sumBy(niAmmounts, 'employee') + _sumBy(niAmmounts, 'employer'));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.weeklyRate !== prevProps.weeklyRate) {\n      const niAmmounts = this.calculateNI();\n      this.props.onChange(_sumBy(niAmmounts, 'employee') + _sumBy(niAmmounts, 'employer'));\n    }\n  }\n\n  calculateNI() {\n    const { weeklyRate } = this.props;\n\n    const tresholdAmmounts = _map(TresholdsOrder, (code, index) => {\n      if (weeklyRate > Tresholds[code].value) {\n        const nextIndex = ++index;\n        if(index < TresholdsOrder.length - 1 && weeklyRate < Tresholds[TresholdsOrder[nextIndex]].value) {\n          return {\n            code,\n            'ammount': Tresholds[TresholdsOrder[nextIndex]].value - Tresholds[code].value\n          };\n        } else {\n          return {\n            code,\n            'ammount': weeklyRate - Tresholds[code].value\n          };\n        }\n      } else {\n        if (weeklyRate < Tresholds.PT.value){\n          return {\n            code,\n            'ammount': 0\n          };\n        } else {\n          return {\n            code,\n            'ammount': Tresholds[code].value - weeklyRate\n          };\n        }\n      }\n    });\n\n    console.log(tresholdAmmounts);\n\n    const niAmmounts = _map(tresholdAmmounts, (treshold) => {\n      return {\n        employee: util.percentOf(treshold.ammount, Tresholds[treshold.code].employee),\n        employer: util.percentOf(treshold.ammount, Tresholds[treshold.code].employer),\n      };\n    });\n\n    return niAmmounts;\n\n  }\n\n  render() {\n    const { weeklyRate } = this.props;\n    const niAmmounts = this.calculateNI();\n\n    const summedTresholds = {\n      employee: _sumBy(niAmmounts, 'employee'),\n      employer: _sumBy(niAmmounts, 'employer'),\n    };\n\n    return (\n      <>\n        <Header as='h2'>National Insurance: {util.financial(summedTresholds.employee + summedTresholds.employer)}/week</Header>\n        <NationalInsuranceGrid\n          weeklyRate={weeklyRate}\n          summedTresholds={summedTresholds}\n          niAmmounts={niAmmounts}\n        />\n      </>\n    );\n  }\n}\n\nexport default NationalInsurance;\n","/*\n  Income Tax rates and bands 2018 to 2019\n*/\n\nconst Tresholds = {\n  PA: {\n    name:  'Personal Allowance',\n    value: 0,\n    rate: 0,\n    exception: /* You don’t get a Personal Allowance on taxable income over */ 123700,\n  },\n  BR: {\n    name:  'Basic Rate',\n    value: 11851,\n    rate: 20,\n  },\n  HR: {\n    name: 'Higher Rate',\n    value: 46350,\n    rate: 40,\n  },\n  AR: {\n    name: 'Additional Rate',\n    value: 150000,\n    rate: 45,\n  },\n};\n\nexport default Tresholds;\n","import React from 'react';\nimport { Progress, Message, Segment } from 'semantic-ui-react';\nimport _findIndex from 'lodash/findIndex';\n\nimport * as util from '../util.js';\nimport Tresholds from './Tresholds';\n\nconst IncomeTaxGrid = ( { yearlyRate, ammounts, summedTresholds }) =>\n  <Segment>\n\n    {yearlyRate < Tresholds.BR.value && (\n      <Progress percent={0} color='pink' progress>\n        {util.financial(0)} {Tresholds.PA.name} on first {util.financial(Tresholds.BR.value)}\n      </Progress>\n    )}\n\n    {yearlyRate > Tresholds.BR.value && (\n      <Progress percent={Tresholds.BR.rate} color='pink' progress active>\n        {util.financial(ammounts[_findIndex(ammounts, ['code', 'BR'])].tax)} {Tresholds.BR.name} from {util.financial(yearlyRate > Tresholds.PA.exception ? Tresholds.PA.value : Tresholds.BR.value)} to {util.financial(yearlyRate < Tresholds.HR.value ? yearlyRate : Tresholds.HR.value)}\n      </Progress>\n    )}\n\n    {yearlyRate > Tresholds.HR.value && (\n      <Progress percent={Tresholds.HR.rate} color='purple' progress active>\n        {util.financial(ammounts[_findIndex(ammounts, ['code', 'HR'])].tax)} {Tresholds.HR.name} from {util.financial(Tresholds.HR.value)} to {util.financial(yearlyRate < Tresholds.AR.value ? yearlyRate : Tresholds.AR.value)}\n      </Progress>\n    )}\n\n    {yearlyRate > Tresholds.AR.value && (\n      <Progress percent={Tresholds.AR.rate} color='violet' progress active>\n        {util.financial(ammounts[_findIndex(ammounts, ['code', 'AR'])].tax)} {Tresholds.AR.name} from {util.financial(Tresholds.AR.value)} to {util.financial(yearlyRate)}\n      </Progress>\n    )}\n\n    {yearlyRate > Tresholds.PA.exception && (\n      <Message size='mini' color='red'>\n        You don’t get a Personal Allowance on taxable income over £123,700\n      </Message>\n    )}\n\n</Segment>\n\nexport default IncomeTaxGrid;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport _map from 'lodash/map';\nimport _sumBy from 'lodash/sumBy';\n\nimport Tresholds from './Tresholds';\nimport IncomeTaxGrid from './Grid';\n\nimport * as util from '../util.js';\nimport '../index.css';\n\nimport { Header } from 'semantic-ui-react'\n\nclass IncomeTax extends Component {\n  static propTypes = {\n    yearlyRate: PropTypes.number.isRequired,\n    onChange: PropTypes.func.isRequired,\n  };\n\n  componentDidMount() {\n    this.props.onChange(_sumBy(this.calculateIncomeTax(), 'tax'));\n  }\n\n  componentDidUpdate(prevProps) {\n  if (this.props.yearlyRate !== prevProps.yearlyRate) {\n    this.props.onChange(_sumBy(this.calculateIncomeTax(), 'tax'));\n  }\n}\n\n  calculateIncomeTax() {\n    const { yearlyRate } = this.props;\n\n    const checkPersonalAllowance = yearlyRate > Tresholds.PA.exception ? Tresholds.PA.value : Tresholds.BR.value;\n\n    const tresholdAmmounts = [];\n\n    if (yearlyRate > Tresholds.AR.value) {\n      tresholdAmmounts.push({ code: 'BR', 'ammount': Tresholds.HR.value - checkPersonalAllowance });\n      tresholdAmmounts.push({ code: 'HR', 'ammount': Tresholds.AR.value - Tresholds.HR.value });\n      tresholdAmmounts.push({ code: 'AR', 'ammount': yearlyRate - Tresholds.AR.value });\n    } else {\n      if (yearlyRate > Tresholds.BR.value) {\n        tresholdAmmounts.push({ code: 'BR', 'ammount': yearlyRate > Tresholds.HR.value ? Tresholds.HR.value - Tresholds.BR.value : yearlyRate - Tresholds.BR.value});\n      }\n      if (yearlyRate > Tresholds.HR.value) {\n        tresholdAmmounts.push({ code: 'HR', 'ammount': yearlyRate - Tresholds.HR.value });\n      }\n    }\n\n    const ammounts = _map(tresholdAmmounts, (treshold) => {\n      return {\n        tax: util.percentOf(treshold.ammount, Tresholds[treshold.code].rate),\n        ...treshold\n      };\n    });\n\n    return ammounts;\n  }\n\n  render() {\n    const { yearlyRate } = this.props;\n\n    const ammounts = this.calculateIncomeTax();\n    const summedTresholds = _sumBy(ammounts, 'tax');\n\n    return (\n      <>\n        <Header as='h2'>Income Tax: {util.financial(summedTresholds)}/year</Header>\n        <IncomeTaxGrid\n          yearlyRate={yearlyRate}\n          summedTresholds={summedTresholds}\n          ammounts={ammounts}\n        />\n      </>\n    );\n  }\n}\n\nexport default IncomeTax;\n","import React, { Component } from 'react';\nimport { Input } from 'semantic-ui-react'\nimport PropTypes from 'prop-types';\n\nclass ContractDetails extends Component {\n\n  handleChangeWeeks = (e) => {\n    this.props.onChangeWeeks(e.target.value * 1);\n  }\n  handleChangeDayRate = (e) => {\n    this.props.onChangeRate(e.target.value * 1);\n  }\n\n  render() {\n    return (\n      <div className=\"rateAndWeeks\">\n        <Input\n          pattern=\"\\d*\"\n          type=\"number\"\n          min=\"1\"\n          value={this.props.noWeeks}\n          onChange={this.handleChangeWeeks}\n          label={{ content: 'weeks' }}\n          labelPosition='right'\n          placeholder='Weeks'\n          size='large'\n        />\n        @\n        <Input\n          pattern=\"\\d*\"\n          type=\"number\"\n          step=\"10\"\n          min=\"0\"\n          onChange={this.handleChangeDayRate}\n          value={this.props.dayRate}\n          label={{ content: '£/day' }}\n          labelPosition='right'\n          placeholder='Day rate'\n          size='large'\n        />\n      </div>\n    );\n  }\n}\n\nContractDetails.propTypes = {\n  onChangeRate: PropTypes.func.isRequired,\n  onChangeWeeks: PropTypes.func.isRequired,\n  dayRate: PropTypes.number.isRequired,\n  noWeeks: PropTypes.number.isRequired,\n};\n\nexport default ContractDetails;\n","import React from 'react';\nimport { Segment, Statistic } from 'semantic-ui-react'\nimport PropTypes from 'prop-types';\nimport * as util from '../util.js';\n\nconst NetPay = ({ weeklyRate, nationalInsurance, incomeTax, noWeeks }) => {\n  const gross = weeklyRate * noWeeks;\n  const net = gross - (nationalInsurance * noWeeks) - incomeTax;\n\n  return (\n    <Segment className='netPay'>\n      <Statistic size='small'>\n        <Statistic.Value>{util.financial(gross)}</Statistic.Value>\n        <Statistic.Label>GROSS Pay</Statistic.Label>\n      </Statistic>\n      <Statistic size='small' color='green'>\n        <Statistic.Value>{util.financial(net)}</Statistic.Value>\n        <Statistic.Label>NET Pay</Statistic.Label>\n      </Statistic>\n      <Statistic size='small'>\n        <Statistic.Value>{util.financial(incomeTax)}</Statistic.Value>\n        <Statistic.Label>Income Tax</Statistic.Label>\n      </Statistic>\n      <Statistic size='small'>\n        <Statistic.Value>{util.financial(nationalInsurance * noWeeks)}</Statistic.Value>\n        <Statistic.Label>National Insurance</Statistic.Label>\n      </Statistic>\n    </Segment>\n  );\n}\n\nNetPay.propTypes = {\n  nationalInsurance: PropTypes.number.isRequired,\n  incomeTax: PropTypes.number.isRequired,\n  weeklyRate: PropTypes.number.isRequired,\n  noWeeks: PropTypes.number.isRequired,\n};\n\nexport default NetPay;\n","import React, { Component } from 'react';\nimport NationalInsurance from './NationalInsurance';\nimport IncomeTax from './IncomeTax';\nimport ContractDetails from './ContractDetails';\nimport NetPay from './NetPay';\n\nimport './index.css';\n\nclass App extends Component {\n\n  state = {\n    dayRate: 50,\n    noWeeks: 1,\n    incomeTax: 0,\n    nationalInsurance: 0,\n  };\n\n  updateDayRate = (dayRate) => {\n    this.setState({ dayRate });\n  }\n  updateNumberOfWeeks = (noWeeks) => {\n    this.setState({ noWeeks });\n  }\n\n  handleNationalInsuranceChange = (nationalInsurance) => {\n    this.setState({ nationalInsurance });\n  }\n  handleIncomeTaxChange = (incomeTax) => {\n    this.setState({ incomeTax });\n  }\n\n  render() {\n    return (\n      <>\n        <ContractDetails\n          onChangeRate={this.updateDayRate}\n          onChangeWeeks={this.updateNumberOfWeeks}\n          dayRate={this.state.dayRate}\n          noWeeks={this.state.noWeeks}\n        />\n\n        <IncomeTax\n          yearlyRate={this.state.dayRate * 5 * this.state.noWeeks}\n          onChange={this.handleIncomeTaxChange}\n        />\n\n        <NationalInsurance\n          weeklyRate={this.state.dayRate * 5}\n          onChange={this.handleNationalInsuranceChange}\n        />\n\n        <NetPay\n          weeklyRate={this.state.dayRate * 5}\n          noWeeks={this.state.noWeeks}\n          incomeTax={this.state.incomeTax}\n          nationalInsurance={this.state.nationalInsurance}\n        />\n    </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}